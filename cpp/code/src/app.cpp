/*
 * This C++ source file was generated by the Gradle 'init' task.
 */

#include "app.hpp"
#include "threading.hpp"
#include "vector_utils.hpp"
#include <chrono>
#include "print.hpp"
#include "matrix.hpp"
#include "linear_algebra/elementary.hpp"

using namespace ovd;
using namespace std;
using namespace std::chrono;

inline decltype(auto) getEnd(time_point<steady_clock> start) {
    return duration_cast<nanoseconds>(high_resolution_clock::now() - start).count();
}


void printColumns() {
    auto matrix = createMatrix<int>(3, 3, [&] (size_t row, size_t col) -> int {
        return (3 * row) + col + 1;
    });
    // Write 2d range iterator to convert this into one loop
    repeat(i, 3) {
        repeat(j, 3) {
            print(matrix[i][j]);
        }
        print("\n");
    }

    repeat(i, 3) {
        auto column = ColumnView(matrix, i);
        repeat(j, 3) {
            print(column[j], "\n");
        }
        print("\n");
    }

    Matrix<int> secondMatrix = {
            {1, 2, 3},
            {2, 4, 6},
            {3, 6, 9}
    };
    repeat(i, 3) {
        repeat(j, 3) {
            print(secondMatrix[i][j]);
        }
        print("\n");
    }
    auto row = secondMatrix[0];
    auto column = ColumnView(secondMatrix, 0);
    print(arrayProduct(row, column), "\n");
    print(arrayProduct(column, row), "\n");
}

void testSumming() {
    auto elements = utils::createVector(1, 10000);

    auto startNormal = high_resolution_clock::now();
    auto sumNormal = accumulate(all(elements), 0);
    auto timeNormal = getEnd(startNormal);

    auto startThreaded = high_resolution_clock::now();
    auto sumThreaded = calculateThreadedSum(elements);
    auto timeThreaded = getEnd(startThreaded);

    print("sumNormal: ", sumNormal, ", time: ", timeNormal, '\n');
    print("sumThreaded: ", sumThreaded, ", time: ", timeThreaded, '\n');

    printColumns();
}


int closestSmallerOrEqual(const vector<int> &elements, int target) {
    int start = 0;
    int end = elements.size();

    int midx = -1;

    while (start != end) {
        int mid = end - ((end - start) / 2);

        if (elements[mid] == target) return mid;

        if (elements[mid] > target) {
            end = mid;
        }
        else if (elements[mid] < target) {
            start = mid;
        }
        if (start <= target) {
            if (midx == -1) {
                midx = start;
            }
            else {
                midx = (elements[midx] < elements[start]) ? midx : start;
            }
        }
    }


    return midx;
}

void testClosestSmaller() {
    vector<int> v = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25 };
    repeat(i, 25) {
        print("i: ", i, " smallest: ", closestSmallerOrEqual(v, v[i]), "\n");
    }
}

//
//
//int main () {
//    testClosestSmaller();
//    return 0;
//}


// C++ Program for Floyd Warshall Algorithm
//#include <bits/stdc++.h>
using namespace std;

// A utility function to swap two elements
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

/* This function takes last element as pivot, places
the pivot element at its correct position in sorted
array, and places all smaller (smaller than pivot)
to left of pivot and all greater elements to right
of pivot */
int partition (int arr[], int low, int high)
{
    int pivot = arr[high]; // pivot
    int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far

    for (int j = low; j <= high - 1; j++)
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
        {
            i++; // increment index of smaller element
            cout << low << ", " << high << ", i = " << i << ", pivot = " << pivot << "\n";
            swap(&arr[i], &arr[j]);
            repeat(i, 5) {
                cout << arr[i] << ", ";
            }
            cout << endl;
        }
    }
    swap(&arr[i + 1], &arr[high]);
    cout << low << ", " << high << ", i = " << i << ", pivot = " << pivot << "\n";
    repeat(i, 5) {
        cout << arr[i] << ", ";
    }
    cout << endl;
    return (i + 1);
}

/* The main function that implements QuickSort
arr[] --> Array to be sorted,
low --> Starting index,
high --> Ending index */
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
        at right place */
        int pi = partition(arr, low, high);


        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Driver Code
int main()
{
    int arr[] = { 5, -4, 2, -1, -3 };
    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr, 0, n - 1);
    cout << "Sorted array: \n";
    printArray(arr, n);
    return 0;
}